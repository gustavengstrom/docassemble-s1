metadata:
  title: |
    s1-10
  short title: |
    The undertaking shall disclose whether or not its employees are paid an adequate wage, and if they are not all paid an adequate wage, the countries and percentage of employees concerned. All questions marked with * are voluntary. If unsure, leave blank.
  show login: False
  description: |
    DESCRIPTION 
  revision_date: 2024-09-12
---
modules:
  - .post
---
features:
  #css: sds.css # local CSS pointer ## goood tutorial for styling da: https://www.youtube.com/watch?v=6a3sER5MOK8
  popover trigger: hover # how to display interactive content/hyperlinks
  bootstrap theme: https://bootswatch.com/5/flatly/bootstrap.min.css
  navigation: True
  progress bar: True
  show progress bar percentage: True
  progressive: True
  inverse navbar: False
  hide navbar: True
  question help button: True
---
field: intro_screen
question: |
  Social 1-10 Own Workforce:  Adequate wages
subquestion: |
  The undertaking shall disclose whether or not its employees are paid an adequate wage, and if they are not all paid an adequate wage, the countries and percentage of employees concerned. All questions marked with * are voluntary. If unsure, leave blank.

  To get started, press **Continue**.
---
mandatory: True
code: |
  multi_user = True
  guest_member = None

  # Get query params
  board_id = url_args.get("board_id", "")
  survey_id = url_args.get("survey_id", "")
  django_hostname = os.environ.get("DJANGOHOSTNAME")
  redirect_url = f"https://{django_hostname}/pages/{board_id}/{survey_id}/completed/?submitted=1"
  login_url = f"https://{django_hostname}/accounts/login/"

  token = url_args.get("token")

  intro_screen
  validate_status, validate_content = validate_session({"token": token, "board_id": board_id, "survey_id": survey_id})
  if validate_status != 200:
     invalid_token_screen
  else:
    session_info = json.loads(validate_content)
    guest_member = session_info.get("boardmember_id")
    if guest_member:
      redirect_url = "https://www.beyondcsrd.se"

  # Get more query params
  organisation_id = url_args.get("organisation", "")
  target_date = url_args.get("target_date")
  external_organisation = url_args.get("external_organisation")
  wekan_board = url_args.get("wekan_board")   # If wekan_board is set to None the list and swimlane info will be retrieved in the django backend
  list_id = url_args.get("list_id", "optional_default_list_id")
  swimlane_id = url_args.get("swimlane_id", "optional_default_swimlane_id")

  # This is needed so we can filter active interviews on board_id
  session_tags().add(board_id)
  session_tags().add(board_id+"__"+survey_id)
  session_tags().add(board_id+"__"+survey_id+"__"+organisation_id)

  survey_data = []
  survey_data.append({'name': 'Are all the undertaking&#x27;s employees paid an adequate wage, in line with applicable benchmarks?', 'value': S1_10_1 if S1_10_1!='None' else '', 'id': 'S1_10_1', 'answer_type': 'Yes/No/Partly'})
  survey_data.append({'name': 'Please share the information on the countries where employees earn below the applicable adequate wage benchmark.', 'value': S1_10_2, 'id': 'S1_10_2', 'answer_type': 'OPEN_LARGE'})
  survey_data.append({'name': 'Please disclose the percentage of employees that earn below the applicable adequate wage benchmark for each of these countries.', 'value': S1_10_3, 'id': 'S1_10_3', 'answer_type': 'PERCENT'})
  survey_data.append({'name': 'Please disclose the percentage of non-employees paid below the applicable adequate wage benchmark for each of these countries.*', 'value': S1_10_4, 'id': 'S1_10_4', 'answer_type': 'PERCENT'})

  card_title = 's1-10'
  card_description = ''
  # Description section in the wekan board - need to be composed with markdown and be populated with datapartner_url from the intervfile_uploadsiew.
  card_title = f"{card_title}"
  card_description = f"{card_description}"
  
  email_title = 's1-10'
  #! Email compose for outgoing email.
  email_body = f"Dear Partner, <br> <br> This is an automated message to confirm we have recieved the form - {email_title}.  <br> <br> Best regards <br> reportAll Team."
  
  email_data = [
      {
          "subject": email_title,
          "body": email_body,
          "recipients": [],
          "from": "info@reportall.se",
      }
  ]

  survey_data_ids = [d['id'] for d in survey_data]
  survey_analytics = []
  survey_analytics.append({"id": "sc_id","name": "score_coverage", "values": [dyn_id for dyn_id in survey_data_ids if any([sa_id in dyn_id for sa_id in ['S1_10_1', 'S1_10_2', 'S1_10_3']])]})

  survey_analytics_dq = []
  for sa_idx, sa in enumerate(survey_analytics):
    if not all([_id in survey_data_ids for _id in sa["values"]]):
      sd_tag = []
      sd_found = []
      drop_sa_ids = []
      for sd in survey_data:
        for _id in sa["values"]:
          if _id in sd["id"]:
            sd_found.append(sd["id"])
            tag = sd.get("tag")
            if tag:
              sd_tag.append(tag)
            break
        if len(sd_found) == len(sa["values"]) and len(sd_found)>0:   # Found all sa values in survey_data
          dynamic_sa_dict = survey_analytics[sa_idx].copy()
          dynamic_sa_dict["id"] = dynamic_sa_dict["id"] + f"__DQ{sd_found[0].split('__DQ')[-1]}"
          dynamic_sa_dict["values"] = sd_found
          dynamic_sa_dict["tag"] = next(iter(set(sd_tag)), None)
          survey_analytics_dq.append(dynamic_sa_dict)
          drop_sa_ids.append(sa_idx)
          sd_found = []
          sd_tag = []
    else:
      survey_analytics_dq.append(sa)


  data = {
      "board_id": board_id,
      "survey_id": survey_id,
      "organisation_id": organisation_id,
      "external_organisation": external_organisation,
      "survey_data": survey_data,
      "survey_analytics": survey_analytics_dq,
      "survey_uploads": [],
      "max_responses": {"count": "9", "date_period": "year", "column_title": "Fiscal year"},
      "target_date": target_date,
      "wekan_board": wekan_board,
      "list_id": list_id,
      "swimlane_id": swimlane_id,
      "wekan_data": {
          "card_title": card_title,
          "card_description": card_description
  
      },
      # "email_data": email_data,
      "aux_data": [
      ],
      "guest_member": guest_member,
    }


  # send data to django
  final_screen
  reponse_status_code, response_content = store_interview_results(data)
  if reponse_status_code == 200:
    define('error_screen', False) 
    command('exit', url=redirect_url)
  else:
    error_screen
--- 
progress: 0
question: |
  Are all the undertaking&#x27;s employees paid an adequate wage, in line with applicable benchmarks? 
back button: True
fields:
  - no label: S1_10_1
    input type: radio
    required: false
    choices:
      - Yes
      - No
      - Partly
--- 
progress: 25
question: |
  Please share the information on the countries where employees earn below the applicable adequate wage benchmark. 
back button: True
fields:
  - no label: S1_10_2
    datatype: area
    required: false
--- 
progress: 50
question: |
  Please disclose the percentage of employees that earn below the applicable adequate wage benchmark for each of these countries. 
help:
  label: Help?
  heading: <BR><h6>Explanation</h6>
  content: |
    AR 72. The lowest wage shall be calculated for the lowest pay category, excluding interns and apprentices. This is to be based on the basic wage plus any fixed additional payments that are guaranteed to all employees. The lowest wage shall be considered separately for each country in which the undertaking has operations, except outside the EEA when the relevant adequate or minimum wage is defined at a sub national level. AR 74. Directive (EU) 2022/2041 on adequate minimum wages in the European Union references both indicative reference values commonly used at international level such as 60 % of the gross median wage and 50 % of the gross average wage, and/or indicative reference values used at national level. Data for the indicative values of 60% of the national median gross wage or 50% of the national average gross wage can be obtained from the European Labour Force Survey.
back button: True
fields:
  - no label: S1_10_3
    datatype: number
    required: false
--- 
progress: 75
question: |
  Please disclose the percentage of non-employees paid below the applicable adequate wage benchmark for each of these countries.* 
help:
  label: Help?
  heading: <BR><h6>Explanation</h6>
  content: |
    Voluntary question.
back button: True
fields:
  - no label: S1_10_4
    datatype: number
    required: false
---
#! Response report before submission
progress: 100
field: final_screen
back button: True
question: |
  Congratulations!
subquestion: |
  All questions have been addressed. Press the submit button below to send in your answers.
continue button label: Submit answers!

---
#! Response report before submission
event: error_screen
prevent going back: True
question: |
  Something went wrong when submitting your answers. 
subquestion: |  
  Please try again or contact <a href="mailto:info@beyondcsrd.se">info@beyondcsrd.se</a> for help.
under: |
  Details: ${ response_content.decode() }
buttons:
  Exit: exit

---

event: require_login_screen
question: |
  Oops! You have been logged out. Please login again.
subquestion: |
  ${ action_button_html(login_url, size='md', color='primary', label='Login', new_window=False) }

---

event: invalid_token_screen
question: |
  Your survey token is invalid. Please contact the administrator to request a new url. 
subquestion: |
  ${ action_button_html(login_url, size='md', color='primary', label='Login', new_window=False) }

---